import SPI;
import Credential;
import Util;
import OpenApiUtil;
import EndpointUtil;

extends SPI;

init() {
  super();
}

async function modifyConfiguration(context: SPI.InterceptorContext, attributeMap: SPI.AttributeMap): void {
  var request = context.request;
  var config = context.configuration;
  config.endpoint = getEndpoint(request.productId, config.regionId, config.endpointRule, config.network, config.suffix, config.endpointMap, config.endpoint);

}

async function modifyRequest(context: SPI.InterceptorContext, attributeMap: SPI.AttributeMap): void {
  var request = context.request;
  var config = context.configuration;
  var credential : Credential = request.credential;
  request.query = {
    Action = request.action,
    Format = 'json',
    Version = request.version,
    Timestamp = OpenApiUtil.getTimestamp(),
    SignatureNonce = Util.getNonce(),
    ...request.query
  };
  request.headers = {
    host = config.endpoint,
    x-acs-version = request.version,
    x-acs-action = request.action,
    user-agent = request.userAgent
  };
  var t : map[string]any = null;
  if (!Util.isUnset(request.body)) {
    t = Util.assertAsMap(request.body);
    var tmp = Util.anyifyMapValue(OpenApiUtil.query(t));
    request.stream = Util.toFormString(tmp);
    request.headers.content-type = 'application/x-www-form-urlencoded';
  }
  if (!Util.equalString(request.authType, 'Anonymous')) {
    var accessKeyId = credential.getAccessKeyId();
    var accessKeySecret = credential.getAccessKeySecret();
    var securityToken = credential.getSecurityToken();

    if (!Util.empty(securityToken)) {
      request.query.SecurityToken = securityToken;
    }
    request.query.SignatureMethod = 'HMAC-SHA1';
    request.query.SignatureVersion = '1.0';
    request.query.AccessKeyId = accessKeyId;
    
    var signedParam = {
      ...request.query,
      ...OpenApiUtil.query(t)
    };
    request.query.Signature = OpenApiUtil.getRPCSignature(signedParam, request.method, accessKeySecret);
  }
}

async function modifyResponse(context: SPI.InterceptorContext, attributeMap: SPI.AttributeMap): void {
  var request = context.request;
  var config = context.configuration;
  var response = context.response;
  if (Util.is4xx(response.statusCode) || Util.is5xx(response.statusCode)) {
    var _res = Util.readAsJSON(response.body);
    var err = Util.assertAsMap(_res);
    var requestId = defaultAny(err.RequestId, err.requestId);
    throw {
      code = `${defaultAny(err.Code, err.code)}`,
      message = `code: ${response.statusCode}, ${defaultAny(err.Message, err.message)} request id: ${requestId}`,
      data = err,
    };
  }
  if (Util.equalString(request.bodyType, 'binary')) {
    response.deserializedBody = response.body;
  } else if (Util.equalString(request.bodyType, 'byte')) {
    var byt = Util.readAsBytes(response.body);
    response.deserializedBody = byt;
  } else if (Util.equalString(request.bodyType, 'string')) {
    var str = Util.readAsString(response.body);
    response.deserializedBody = str;
  } else if (Util.equalString(request.bodyType, 'json')) {
    var obj = Util.readAsJSON(response.body);
    var res = Util.assertAsMap(obj);
    response.deserializedBody = res;
  } else if (Util.equalString(request.bodyType, 'array')) {
    var arr = Util.readAsJSON(response.body);
    response.deserializedBody = arr;
  }
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

function defaultAny(inputValue: any, defaultValue: any): any {
  if (Util.isUnset(inputValue)) {
    return defaultValue;
  }
  return inputValue;
}